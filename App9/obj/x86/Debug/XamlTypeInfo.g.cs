//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace App9
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::App9.App9_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::App9.App9_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::App9.App9_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace App9.App9_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::App9.App9_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::App9.App9_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[60];
            _typeNameTable[0] = "Microsoft.AdMediator.Universal.AdMediatorControl";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Control";
            _typeNameTable[2] = "String";
            _typeNameTable[3] = "Microsoft.AdMediator.Core.Models.AdSdkParameters";
            _typeNameTable[4] = "Object";
            _typeNameTable[5] = "System.Collections.Generic.IDictionary`2<String, TimeSpan>";
            _typeNameTable[6] = "TimeSpan";
            _typeNameTable[7] = "System.ValueType";
            _typeNameTable[8] = "Int32";
            _typeNameTable[9] = "Int64";
            _typeNameTable[10] = "Double";
            _typeNameTable[11] = "App9.Pages.Ad";
            _typeNameTable[12] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[13] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[14] = "App9.UserControls.AALeftMenuItem";
            _typeNameTable[15] = "App9.Models.Nav";
            _typeNameTable[16] = "App9.UserControls.AdeptlyAdaptive";
            _typeNameTable[17] = "App9.Models.Girl";
            _typeNameTable[18] = "App9.Pages.AdeptlyAdaptive";
            _typeNameTable[19] = "System.Collections.ObjectModel.ObservableCollection`1<App9.Models.Girl>";
            _typeNameTable[20] = "System.Collections.ObjectModel.Collection`1<App9.Models.Girl>";
            _typeNameTable[21] = "System.Collections.Generic.List`1<App9.Models.Nav>";
            _typeNameTable[22] = "App9.Pages.AlbumCover";
            _typeNameTable[23] = "App9.Pages.Animation";
            _typeNameTable[24] = "App9.UserControls.GirlDataTemplate";
            _typeNameTable[25] = "App9.Pages.Binding";
            _typeNameTable[26] = "App9.Pages.BindingListView";
            _typeNameTable[27] = "App9.Pages.BlankPage1";
            _typeNameTable[28] = "App9.Pages.Canvas";
            _typeNameTable[29] = "App9.Pages.Coffee";
            _typeNameTable[30] = "App9.Pages.CommonControls";
            _typeNameTable[31] = "App9.Pages.CommonControls2";
            _typeNameTable[32] = "App9.Pages.Complete";
            _typeNameTable[33] = "App9.Pages.DeviceSpecificView";
            _typeNameTable[34] = "App9.Pages.Donuts";
            _typeNameTable[35] = "App9.Pages.GoNuts";
            _typeNameTable[36] = "App9.Pages.GridChallenge";
            _typeNameTable[37] = "App9.Pages.GridStackChallenge";
            _typeNameTable[38] = "App9.Pages.Gridview";
            _typeNameTable[39] = "App9.Pages.Gridview2";
            _typeNameTable[40] = "App9.MainPage";
            _typeNameTable[41] = "App9.Pages.Hamburgermenu";
            _typeNameTable[42] = "App9.Pages.InAppPurchase";
            _typeNameTable[43] = "App9.Pages.MediaLibrary";
            _typeNameTable[44] = "System.Collections.ObjectModel.ObservableCollection`1<App9.Models.Song>";
            _typeNameTable[45] = "System.Collections.ObjectModel.Collection`1<App9.Models.Song>";
            _typeNameTable[46] = "App9.Models.Song";
            _typeNameTable[47] = "Windows.UI.Xaml.Media.Imaging.BitmapImage";
            _typeNameTable[48] = "Windows.Storage.StorageFile";
            _typeNameTable[49] = "App9.Pages.RelativePanel";
            _typeNameTable[50] = "App9.Pages.RoundImage";
            _typeNameTable[51] = "App9.Pages.Schedule";
            _typeNameTable[52] = "App9.Pages.Scrollviewer";
            _typeNameTable[53] = "App9.Pages.SplitView";
            _typeNameTable[54] = "App9.Pages.Stackpanel";
            _typeNameTable[55] = "App9.Pages.StackpanelChallenge";
            _typeNameTable[56] = "App9.Pages.Themes";
            _typeNameTable[57] = "App9.Pages.VisualState";
            _typeNameTable[58] = "App9.Pages.VisualStateColumns";
            _typeNameTable[59] = "App9.Pages.Weather";

            _typeTable = new global::System.Type[60];
            _typeTable[0] = typeof(global::Microsoft.AdMediator.Universal.AdMediatorControl);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Control);
            _typeTable[2] = typeof(global::System.String);
            _typeTable[3] = typeof(global::Microsoft.AdMediator.Core.Models.AdSdkParameters);
            _typeTable[4] = typeof(global::System.Object);
            _typeTable[5] = typeof(global::System.Collections.Generic.IDictionary<global::System.String, global::System.TimeSpan>);
            _typeTable[6] = typeof(global::System.TimeSpan);
            _typeTable[7] = typeof(global::System.ValueType);
            _typeTable[8] = typeof(global::System.Int32);
            _typeTable[9] = typeof(global::System.Int64);
            _typeTable[10] = typeof(global::System.Double);
            _typeTable[11] = typeof(global::App9.Pages.Ad);
            _typeTable[12] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[13] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[14] = typeof(global::App9.UserControls.AALeftMenuItem);
            _typeTable[15] = typeof(global::App9.Models.Nav);
            _typeTable[16] = typeof(global::App9.UserControls.AdeptlyAdaptive);
            _typeTable[17] = typeof(global::App9.Models.Girl);
            _typeTable[18] = typeof(global::App9.Pages.AdeptlyAdaptive);
            _typeTable[19] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::App9.Models.Girl>);
            _typeTable[20] = typeof(global::System.Collections.ObjectModel.Collection<global::App9.Models.Girl>);
            _typeTable[21] = typeof(global::System.Collections.Generic.List<global::App9.Models.Nav>);
            _typeTable[22] = typeof(global::App9.Pages.AlbumCover);
            _typeTable[23] = typeof(global::App9.Pages.Animation);
            _typeTable[24] = typeof(global::App9.UserControls.GirlDataTemplate);
            _typeTable[25] = typeof(global::App9.Pages.Binding);
            _typeTable[26] = typeof(global::App9.Pages.BindingListView);
            _typeTable[27] = typeof(global::App9.Pages.BlankPage1);
            _typeTable[28] = typeof(global::App9.Pages.Canvas);
            _typeTable[29] = typeof(global::App9.Pages.Coffee);
            _typeTable[30] = typeof(global::App9.Pages.CommonControls);
            _typeTable[31] = typeof(global::App9.Pages.CommonControls2);
            _typeTable[32] = typeof(global::App9.Pages.Complete);
            _typeTable[33] = typeof(global::App9.Pages.DeviceSpecificView);
            _typeTable[34] = typeof(global::App9.Pages.Donuts);
            _typeTable[35] = typeof(global::App9.Pages.GoNuts);
            _typeTable[36] = typeof(global::App9.Pages.GridChallenge);
            _typeTable[37] = typeof(global::App9.Pages.GridStackChallenge);
            _typeTable[38] = typeof(global::App9.Pages.Gridview);
            _typeTable[39] = typeof(global::App9.Pages.Gridview2);
            _typeTable[40] = typeof(global::App9.MainPage);
            _typeTable[41] = typeof(global::App9.Pages.Hamburgermenu);
            _typeTable[42] = typeof(global::App9.Pages.InAppPurchase);
            _typeTable[43] = typeof(global::App9.Pages.MediaLibrary);
            _typeTable[44] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::App9.Models.Song>);
            _typeTable[45] = typeof(global::System.Collections.ObjectModel.Collection<global::App9.Models.Song>);
            _typeTable[46] = typeof(global::App9.Models.Song);
            _typeTable[47] = typeof(global::Windows.UI.Xaml.Media.Imaging.BitmapImage);
            _typeTable[48] = typeof(global::Windows.Storage.StorageFile);
            _typeTable[49] = typeof(global::App9.Pages.RelativePanel);
            _typeTable[50] = typeof(global::App9.Pages.RoundImage);
            _typeTable[51] = typeof(global::App9.Pages.Schedule);
            _typeTable[52] = typeof(global::App9.Pages.Scrollviewer);
            _typeTable[53] = typeof(global::App9.Pages.SplitView);
            _typeTable[54] = typeof(global::App9.Pages.Stackpanel);
            _typeTable[55] = typeof(global::App9.Pages.StackpanelChallenge);
            _typeTable[56] = typeof(global::App9.Pages.Themes);
            _typeTable[57] = typeof(global::App9.Pages.VisualState);
            _typeTable[58] = typeof(global::App9.Pages.VisualStateColumns);
            _typeTable[59] = typeof(global::App9.Pages.Weather);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_AdMediatorControl() { return new global::Microsoft.AdMediator.Universal.AdMediatorControl(); }
        private object Activate_3_AdSdkParameters() { return new global::Microsoft.AdMediator.Core.Models.AdSdkParameters(); }
        private object Activate_11_Ad() { return new global::App9.Pages.Ad(); }
        private object Activate_14_AALeftMenuItem() { return new global::App9.UserControls.AALeftMenuItem(); }
        private object Activate_15_Nav() { return new global::App9.Models.Nav(); }
        private object Activate_16_AdeptlyAdaptive() { return new global::App9.UserControls.AdeptlyAdaptive(); }
        private object Activate_17_Girl() { return new global::App9.Models.Girl(); }
        private object Activate_18_AdeptlyAdaptive() { return new global::App9.Pages.AdeptlyAdaptive(); }
        private object Activate_19_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::App9.Models.Girl>(); }
        private object Activate_20_Collection() { return new global::System.Collections.ObjectModel.Collection<global::App9.Models.Girl>(); }
        private object Activate_21_List() { return new global::System.Collections.Generic.List<global::App9.Models.Nav>(); }
        private object Activate_22_AlbumCover() { return new global::App9.Pages.AlbumCover(); }
        private object Activate_23_Animation() { return new global::App9.Pages.Animation(); }
        private object Activate_24_GirlDataTemplate() { return new global::App9.UserControls.GirlDataTemplate(); }
        private object Activate_25_Binding() { return new global::App9.Pages.Binding(); }
        private object Activate_26_BindingListView() { return new global::App9.Pages.BindingListView(); }
        private object Activate_27_BlankPage1() { return new global::App9.Pages.BlankPage1(); }
        private object Activate_28_Canvas() { return new global::App9.Pages.Canvas(); }
        private object Activate_29_Coffee() { return new global::App9.Pages.Coffee(); }
        private object Activate_30_CommonControls() { return new global::App9.Pages.CommonControls(); }
        private object Activate_31_CommonControls2() { return new global::App9.Pages.CommonControls2(); }
        private object Activate_32_Complete() { return new global::App9.Pages.Complete(); }
        private object Activate_33_DeviceSpecificView() { return new global::App9.Pages.DeviceSpecificView(); }
        private object Activate_34_Donuts() { return new global::App9.Pages.Donuts(); }
        private object Activate_35_GoNuts() { return new global::App9.Pages.GoNuts(); }
        private object Activate_36_GridChallenge() { return new global::App9.Pages.GridChallenge(); }
        private object Activate_37_GridStackChallenge() { return new global::App9.Pages.GridStackChallenge(); }
        private object Activate_38_Gridview() { return new global::App9.Pages.Gridview(); }
        private object Activate_39_Gridview2() { return new global::App9.Pages.Gridview2(); }
        private object Activate_40_MainPage() { return new global::App9.MainPage(); }
        private object Activate_41_Hamburgermenu() { return new global::App9.Pages.Hamburgermenu(); }
        private object Activate_42_InAppPurchase() { return new global::App9.Pages.InAppPurchase(); }
        private object Activate_43_MediaLibrary() { return new global::App9.Pages.MediaLibrary(); }
        private object Activate_44_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::App9.Models.Song>(); }
        private object Activate_45_Collection() { return new global::System.Collections.ObjectModel.Collection<global::App9.Models.Song>(); }
        private object Activate_46_Song() { return new global::App9.Models.Song(); }
        private object Activate_49_RelativePanel() { return new global::App9.Pages.RelativePanel(); }
        private object Activate_50_RoundImage() { return new global::App9.Pages.RoundImage(); }
        private object Activate_51_Schedule() { return new global::App9.Pages.Schedule(); }
        private object Activate_52_Scrollviewer() { return new global::App9.Pages.Scrollviewer(); }
        private object Activate_53_SplitView() { return new global::App9.Pages.SplitView(); }
        private object Activate_54_Stackpanel() { return new global::App9.Pages.Stackpanel(); }
        private object Activate_55_StackpanelChallenge() { return new global::App9.Pages.StackpanelChallenge(); }
        private object Activate_56_Themes() { return new global::App9.Pages.Themes(); }
        private object Activate_57_VisualState() { return new global::App9.Pages.VisualState(); }
        private object Activate_58_VisualStateColumns() { return new global::App9.Pages.VisualStateColumns(); }
        private object Activate_59_Weather() { return new global::App9.Pages.Weather(); }
        private void MapAdd_5_IDictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.TimeSpan>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.TimeSpan)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_19_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::App9.Models.Girl>)instance;
            var newItem = (global::App9.Models.Girl)item;
            collection.Add(newItem);
        }
        private void VectorAdd_20_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::App9.Models.Girl>)instance;
            var newItem = (global::App9.Models.Girl)item;
            collection.Add(newItem);
        }
        private void VectorAdd_21_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::App9.Models.Nav>)instance;
            var newItem = (global::App9.Models.Nav)item;
            collection.Add(newItem);
        }
        private void VectorAdd_44_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::App9.Models.Song>)instance;
            var newItem = (global::App9.Models.Song)item;
            collection.Add(newItem);
        }
        private void VectorAdd_45_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::App9.Models.Song>)instance;
            var newItem = (global::App9.Models.Song)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::App9.App9_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::App9.App9_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Microsoft.AdMediator.Universal.AdMediatorControl
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_0_AdMediatorControl;
                userType.AddMemberName("Id");
                userType.AddMemberName("AdSdkOptionalParameters");
                userType.AddMemberName("AdSdkTimeouts");
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Control
                xamlType = new global::App9.App9_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  String
                xamlType = new global::App9.App9_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Microsoft.AdMediator.Core.Models.AdSdkParameters
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 4:   //  Object
                xamlType = new global::App9.App9_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  System.Collections.Generic.IDictionary`2<String, TimeSpan>
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.DictionaryAdd = MapAdd_5_IDictionary;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 6:   //  TimeSpan
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("Days");
                userType.AddMemberName("Hours");
                userType.AddMemberName("Milliseconds");
                userType.AddMemberName("Minutes");
                userType.AddMemberName("Seconds");
                userType.AddMemberName("Ticks");
                userType.AddMemberName("TotalDays");
                userType.AddMemberName("TotalHours");
                userType.AddMemberName("TotalMilliseconds");
                userType.AddMemberName("TotalMinutes");
                userType.AddMemberName("TotalSeconds");
                xamlType = userType;
                break;

            case 7:   //  System.ValueType
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 8:   //  Int32
                xamlType = new global::App9.App9_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  Int64
                xamlType = new global::App9.App9_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Double
                xamlType = new global::App9.App9_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  App9.Pages.Ad
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_11_Ad;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::App9.App9_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::App9.App9_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  App9.UserControls.AALeftMenuItem
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_14_AALeftMenuItem;
                userType.AddMemberName("Nav");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  App9.Models.Nav
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_15_Nav;
                userType.AddMemberName("Id");
                userType.AddMemberName("Icon");
                userType.AddMemberName("Label");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  App9.UserControls.AdeptlyAdaptive
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_16_AdeptlyAdaptive;
                userType.AddMemberName("Girl");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  App9.Models.Girl
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_17_Girl;
                userType.AddMemberName("Name");
                userType.AddMemberName("Age");
                userType.AddMemberName("Image");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  App9.Pages.AdeptlyAdaptive
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_18_AdeptlyAdaptive;
                userType.AddMemberName("Girls");
                userType.AddMemberName("Nav");
                userType.AddMemberName("MaxAge");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  System.Collections.ObjectModel.ObservableCollection`1<App9.Models.Girl>
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<App9.Models.Girl>"));
                userType.CollectionAdd = VectorAdd_19_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 20:   //  System.Collections.ObjectModel.Collection`1<App9.Models.Girl>
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_20_Collection;
                userType.CollectionAdd = VectorAdd_20_Collection;
                xamlType = userType;
                break;

            case 21:   //  System.Collections.Generic.List`1<App9.Models.Nav>
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_21_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  App9.Pages.AlbumCover
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_22_AlbumCover;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  App9.Pages.Animation
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_23_Animation;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  App9.UserControls.GirlDataTemplate
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_24_GirlDataTemplate;
                userType.AddMemberName("Girl");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  App9.Pages.Binding
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_25_Binding;
                userType.AddMemberName("Girls");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  App9.Pages.BindingListView
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_26_BindingListView;
                userType.AddMemberName("Girls");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  App9.Pages.BlankPage1
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_27_BlankPage1;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  App9.Pages.Canvas
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_28_Canvas;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  App9.Pages.Coffee
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_29_Coffee;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  App9.Pages.CommonControls
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_30_CommonControls;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  App9.Pages.CommonControls2
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_31_CommonControls2;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  App9.Pages.Complete
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_32_Complete;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  App9.Pages.DeviceSpecificView
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_33_DeviceSpecificView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  App9.Pages.Donuts
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_34_Donuts;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  App9.Pages.GoNuts
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_35_GoNuts;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  App9.Pages.GridChallenge
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_36_GridChallenge;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  App9.Pages.GridStackChallenge
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_37_GridStackChallenge;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  App9.Pages.Gridview
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_38_Gridview;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  App9.Pages.Gridview2
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_39_Gridview2;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  App9.MainPage
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_40_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 41:   //  App9.Pages.Hamburgermenu
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_41_Hamburgermenu;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  App9.Pages.InAppPurchase
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_42_InAppPurchase;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  App9.Pages.MediaLibrary
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_43_MediaLibrary;
                userType.AddMemberName("Songs");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 44:   //  System.Collections.ObjectModel.ObservableCollection`1<App9.Models.Song>
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<App9.Models.Song>"));
                userType.CollectionAdd = VectorAdd_44_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 45:   //  System.Collections.ObjectModel.Collection`1<App9.Models.Song>
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_45_Collection;
                userType.CollectionAdd = VectorAdd_45_Collection;
                xamlType = userType;
                break;

            case 46:   //  App9.Models.Song
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_46_Song;
                userType.AddMemberName("Name");
                userType.AddMemberName("Artist");
                userType.AddMemberName("Album");
                userType.AddMemberName("Cover");
                userType.AddMemberName("File");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 47:   //  Windows.UI.Xaml.Media.Imaging.BitmapImage
                xamlType = new global::App9.App9_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 48:   //  Windows.Storage.StorageFile
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 49:   //  App9.Pages.RelativePanel
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_49_RelativePanel;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 50:   //  App9.Pages.RoundImage
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_50_RoundImage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 51:   //  App9.Pages.Schedule
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_51_Schedule;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 52:   //  App9.Pages.Scrollviewer
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_52_Scrollviewer;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 53:   //  App9.Pages.SplitView
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_53_SplitView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 54:   //  App9.Pages.Stackpanel
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_54_Stackpanel;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 55:   //  App9.Pages.StackpanelChallenge
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_55_StackpanelChallenge;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 56:   //  App9.Pages.Themes
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_56_Themes;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 57:   //  App9.Pages.VisualState
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_57_VisualState;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 58:   //  App9.Pages.VisualStateColumns
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_58_VisualStateColumns;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 59:   //  App9.Pages.Weather
                userType = new global::App9.App9_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_59_Weather;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.AdMediator.Universal.AdMediator_Universal_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Microsoft.Advertising.MicrosoftAdvertising_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_AdMediatorControl_Id(object instance)
        {
            var that = (global::Microsoft.AdMediator.Universal.AdMediatorControl)instance;
            return that.Id;
        }
        private void set_0_AdMediatorControl_Id(object instance, object Value)
        {
            var that = (global::Microsoft.AdMediator.Universal.AdMediatorControl)instance;
            that.Id = (global::System.String)Value;
        }
        private object get_1_AdMediatorControl_AdSdkOptionalParameters(object instance)
        {
            var that = (global::Microsoft.AdMediator.Universal.AdMediatorControl)instance;
            return that.AdSdkOptionalParameters;
        }
        private object get_2_AdMediatorControl_AdSdkTimeouts(object instance)
        {
            var that = (global::Microsoft.AdMediator.Universal.AdMediatorControl)instance;
            return that.AdSdkTimeouts;
        }
        private object get_3_TimeSpan_Days(object instance)
        {
            var that = (global::System.TimeSpan)instance;
            return that.Days;
        }
        private object get_4_TimeSpan_Hours(object instance)
        {
            var that = (global::System.TimeSpan)instance;
            return that.Hours;
        }
        private object get_5_TimeSpan_Milliseconds(object instance)
        {
            var that = (global::System.TimeSpan)instance;
            return that.Milliseconds;
        }
        private object get_6_TimeSpan_Minutes(object instance)
        {
            var that = (global::System.TimeSpan)instance;
            return that.Minutes;
        }
        private object get_7_TimeSpan_Seconds(object instance)
        {
            var that = (global::System.TimeSpan)instance;
            return that.Seconds;
        }
        private object get_8_TimeSpan_Ticks(object instance)
        {
            var that = (global::System.TimeSpan)instance;
            return that.Ticks;
        }
        private object get_9_TimeSpan_TotalDays(object instance)
        {
            var that = (global::System.TimeSpan)instance;
            return that.TotalDays;
        }
        private object get_10_TimeSpan_TotalHours(object instance)
        {
            var that = (global::System.TimeSpan)instance;
            return that.TotalHours;
        }
        private object get_11_TimeSpan_TotalMilliseconds(object instance)
        {
            var that = (global::System.TimeSpan)instance;
            return that.TotalMilliseconds;
        }
        private object get_12_TimeSpan_TotalMinutes(object instance)
        {
            var that = (global::System.TimeSpan)instance;
            return that.TotalMinutes;
        }
        private object get_13_TimeSpan_TotalSeconds(object instance)
        {
            var that = (global::System.TimeSpan)instance;
            return that.TotalSeconds;
        }
        private object get_14_AALeftMenuItem_Nav(object instance)
        {
            var that = (global::App9.UserControls.AALeftMenuItem)instance;
            return that.Nav;
        }
        private object get_15_AdeptlyAdaptive_Girl(object instance)
        {
            var that = (global::App9.UserControls.AdeptlyAdaptive)instance;
            return that.Girl;
        }
        private object get_16_AdeptlyAdaptive_Girls(object instance)
        {
            var that = (global::App9.Pages.AdeptlyAdaptive)instance;
            return that.Girls;
        }
        private void set_16_AdeptlyAdaptive_Girls(object instance, object Value)
        {
            var that = (global::App9.Pages.AdeptlyAdaptive)instance;
            that.Girls = (global::System.Collections.ObjectModel.ObservableCollection<global::App9.Models.Girl>)Value;
        }
        private object get_17_Girl_Name(object instance)
        {
            var that = (global::App9.Models.Girl)instance;
            return that.Name;
        }
        private void set_17_Girl_Name(object instance, object Value)
        {
            var that = (global::App9.Models.Girl)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_18_Girl_Age(object instance)
        {
            var that = (global::App9.Models.Girl)instance;
            return that.Age;
        }
        private void set_18_Girl_Age(object instance, object Value)
        {
            var that = (global::App9.Models.Girl)instance;
            that.Age = (global::System.Int32)Value;
        }
        private object get_19_Girl_Image(object instance)
        {
            var that = (global::App9.Models.Girl)instance;
            return that.Image;
        }
        private void set_19_Girl_Image(object instance, object Value)
        {
            var that = (global::App9.Models.Girl)instance;
            that.Image = (global::System.String)Value;
        }
        private object get_20_AdeptlyAdaptive_Nav(object instance)
        {
            var that = (global::App9.Pages.AdeptlyAdaptive)instance;
            return that.Nav;
        }
        private void set_20_AdeptlyAdaptive_Nav(object instance, object Value)
        {
            var that = (global::App9.Pages.AdeptlyAdaptive)instance;
            that.Nav = (global::System.Collections.Generic.List<global::App9.Models.Nav>)Value;
        }
        private object get_21_Nav_Id(object instance)
        {
            var that = (global::App9.Models.Nav)instance;
            return that.Id;
        }
        private void set_21_Nav_Id(object instance, object Value)
        {
            var that = (global::App9.Models.Nav)instance;
            that.Id = (global::System.Int32)Value;
        }
        private object get_22_Nav_Icon(object instance)
        {
            var that = (global::App9.Models.Nav)instance;
            return that.Icon;
        }
        private void set_22_Nav_Icon(object instance, object Value)
        {
            var that = (global::App9.Models.Nav)instance;
            that.Icon = (global::System.String)Value;
        }
        private object get_23_Nav_Label(object instance)
        {
            var that = (global::App9.Models.Nav)instance;
            return that.Label;
        }
        private void set_23_Nav_Label(object instance, object Value)
        {
            var that = (global::App9.Models.Nav)instance;
            that.Label = (global::System.String)Value;
        }
        private object get_24_AdeptlyAdaptive_MaxAge(object instance)
        {
            var that = (global::App9.Pages.AdeptlyAdaptive)instance;
            return that.MaxAge;
        }
        private void set_24_AdeptlyAdaptive_MaxAge(object instance, object Value)
        {
            var that = (global::App9.Pages.AdeptlyAdaptive)instance;
            that.MaxAge = (global::System.Int32)Value;
        }
        private object get_25_GirlDataTemplate_Girl(object instance)
        {
            var that = (global::App9.UserControls.GirlDataTemplate)instance;
            return that.Girl;
        }
        private object get_26_Binding_Girls(object instance)
        {
            var that = (global::App9.Pages.Binding)instance;
            return that.Girls;
        }
        private void set_26_Binding_Girls(object instance, object Value)
        {
            var that = (global::App9.Pages.Binding)instance;
            that.Girls = (global::System.Collections.ObjectModel.ObservableCollection<global::App9.Models.Girl>)Value;
        }
        private object get_27_BindingListView_Girls(object instance)
        {
            var that = (global::App9.Pages.BindingListView)instance;
            return that.Girls;
        }
        private void set_27_BindingListView_Girls(object instance, object Value)
        {
            var that = (global::App9.Pages.BindingListView)instance;
            that.Girls = (global::System.Collections.ObjectModel.ObservableCollection<global::App9.Models.Girl>)Value;
        }
        private object get_28_MediaLibrary_Songs(object instance)
        {
            var that = (global::App9.Pages.MediaLibrary)instance;
            return that.Songs;
        }
        private void set_28_MediaLibrary_Songs(object instance, object Value)
        {
            var that = (global::App9.Pages.MediaLibrary)instance;
            that.Songs = (global::System.Collections.ObjectModel.ObservableCollection<global::App9.Models.Song>)Value;
        }
        private object get_29_Song_Name(object instance)
        {
            var that = (global::App9.Models.Song)instance;
            return that.Name;
        }
        private void set_29_Song_Name(object instance, object Value)
        {
            var that = (global::App9.Models.Song)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_30_Song_Artist(object instance)
        {
            var that = (global::App9.Models.Song)instance;
            return that.Artist;
        }
        private void set_30_Song_Artist(object instance, object Value)
        {
            var that = (global::App9.Models.Song)instance;
            that.Artist = (global::System.String)Value;
        }
        private object get_31_Song_Album(object instance)
        {
            var that = (global::App9.Models.Song)instance;
            return that.Album;
        }
        private void set_31_Song_Album(object instance, object Value)
        {
            var that = (global::App9.Models.Song)instance;
            that.Album = (global::System.String)Value;
        }
        private object get_32_Song_Cover(object instance)
        {
            var that = (global::App9.Models.Song)instance;
            return that.Cover;
        }
        private void set_32_Song_Cover(object instance, object Value)
        {
            var that = (global::App9.Models.Song)instance;
            that.Cover = (global::Windows.UI.Xaml.Media.Imaging.BitmapImage)Value;
        }
        private object get_33_Song_File(object instance)
        {
            var that = (global::App9.Models.Song)instance;
            return that.File;
        }
        private void set_33_Song_File(object instance, object Value)
        {
            var that = (global::App9.Models.Song)instance;
            that.File = (global::Windows.Storage.StorageFile)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::App9.App9_XamlTypeInfo.XamlMember xamlMember = null;
            global::App9.App9_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.AdMediator.Universal.AdMediatorControl.Id":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.AdMediator.Universal.AdMediatorControl");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Id", "String");
                xamlMember.Getter = get_0_AdMediatorControl_Id;
                xamlMember.Setter = set_0_AdMediatorControl_Id;
                break;
            case "Microsoft.AdMediator.Universal.AdMediatorControl.AdSdkOptionalParameters":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.AdMediator.Universal.AdMediatorControl");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "AdSdkOptionalParameters", "Microsoft.AdMediator.Core.Models.AdSdkParameters");
                xamlMember.Getter = get_1_AdMediatorControl_AdSdkOptionalParameters;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.AdMediator.Universal.AdMediatorControl.AdSdkTimeouts":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.AdMediator.Universal.AdMediatorControl");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "AdSdkTimeouts", "System.Collections.Generic.IDictionary`2<String, TimeSpan>");
                xamlMember.Getter = get_2_AdMediatorControl_AdSdkTimeouts;
                xamlMember.SetIsReadOnly();
                break;
            case "TimeSpan.Days":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TimeSpan");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Days", "Int32");
                xamlMember.Getter = get_3_TimeSpan_Days;
                xamlMember.SetIsReadOnly();
                break;
            case "TimeSpan.Hours":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TimeSpan");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Hours", "Int32");
                xamlMember.Getter = get_4_TimeSpan_Hours;
                xamlMember.SetIsReadOnly();
                break;
            case "TimeSpan.Milliseconds":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TimeSpan");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Milliseconds", "Int32");
                xamlMember.Getter = get_5_TimeSpan_Milliseconds;
                xamlMember.SetIsReadOnly();
                break;
            case "TimeSpan.Minutes":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TimeSpan");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Minutes", "Int32");
                xamlMember.Getter = get_6_TimeSpan_Minutes;
                xamlMember.SetIsReadOnly();
                break;
            case "TimeSpan.Seconds":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TimeSpan");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Seconds", "Int32");
                xamlMember.Getter = get_7_TimeSpan_Seconds;
                xamlMember.SetIsReadOnly();
                break;
            case "TimeSpan.Ticks":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TimeSpan");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Ticks", "Int64");
                xamlMember.Getter = get_8_TimeSpan_Ticks;
                xamlMember.SetIsReadOnly();
                break;
            case "TimeSpan.TotalDays":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TimeSpan");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "TotalDays", "Double");
                xamlMember.Getter = get_9_TimeSpan_TotalDays;
                xamlMember.SetIsReadOnly();
                break;
            case "TimeSpan.TotalHours":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TimeSpan");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "TotalHours", "Double");
                xamlMember.Getter = get_10_TimeSpan_TotalHours;
                xamlMember.SetIsReadOnly();
                break;
            case "TimeSpan.TotalMilliseconds":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TimeSpan");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "TotalMilliseconds", "Double");
                xamlMember.Getter = get_11_TimeSpan_TotalMilliseconds;
                xamlMember.SetIsReadOnly();
                break;
            case "TimeSpan.TotalMinutes":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TimeSpan");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "TotalMinutes", "Double");
                xamlMember.Getter = get_12_TimeSpan_TotalMinutes;
                xamlMember.SetIsReadOnly();
                break;
            case "TimeSpan.TotalSeconds":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("TimeSpan");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "TotalSeconds", "Double");
                xamlMember.Getter = get_13_TimeSpan_TotalSeconds;
                xamlMember.SetIsReadOnly();
                break;
            case "App9.UserControls.AALeftMenuItem.Nav":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App9.UserControls.AALeftMenuItem");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Nav", "App9.Models.Nav");
                xamlMember.Getter = get_14_AALeftMenuItem_Nav;
                xamlMember.SetIsReadOnly();
                break;
            case "App9.UserControls.AdeptlyAdaptive.Girl":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App9.UserControls.AdeptlyAdaptive");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Girl", "App9.Models.Girl");
                xamlMember.Getter = get_15_AdeptlyAdaptive_Girl;
                xamlMember.SetIsReadOnly();
                break;
            case "App9.Pages.AdeptlyAdaptive.Girls":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App9.Pages.AdeptlyAdaptive");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Girls", "System.Collections.ObjectModel.ObservableCollection`1<App9.Models.Girl>");
                xamlMember.Getter = get_16_AdeptlyAdaptive_Girls;
                xamlMember.Setter = set_16_AdeptlyAdaptive_Girls;
                break;
            case "App9.Models.Girl.Name":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App9.Models.Girl");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_17_Girl_Name;
                xamlMember.Setter = set_17_Girl_Name;
                break;
            case "App9.Models.Girl.Age":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App9.Models.Girl");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Age", "Int32");
                xamlMember.Getter = get_18_Girl_Age;
                xamlMember.Setter = set_18_Girl_Age;
                break;
            case "App9.Models.Girl.Image":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App9.Models.Girl");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Image", "String");
                xamlMember.Getter = get_19_Girl_Image;
                xamlMember.Setter = set_19_Girl_Image;
                break;
            case "App9.Pages.AdeptlyAdaptive.Nav":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App9.Pages.AdeptlyAdaptive");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Nav", "System.Collections.Generic.List`1<App9.Models.Nav>");
                xamlMember.Getter = get_20_AdeptlyAdaptive_Nav;
                xamlMember.Setter = set_20_AdeptlyAdaptive_Nav;
                break;
            case "App9.Models.Nav.Id":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App9.Models.Nav");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Id", "Int32");
                xamlMember.Getter = get_21_Nav_Id;
                xamlMember.Setter = set_21_Nav_Id;
                break;
            case "App9.Models.Nav.Icon":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App9.Models.Nav");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Icon", "String");
                xamlMember.Getter = get_22_Nav_Icon;
                xamlMember.Setter = set_22_Nav_Icon;
                break;
            case "App9.Models.Nav.Label":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App9.Models.Nav");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Label", "String");
                xamlMember.Getter = get_23_Nav_Label;
                xamlMember.Setter = set_23_Nav_Label;
                break;
            case "App9.Pages.AdeptlyAdaptive.MaxAge":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App9.Pages.AdeptlyAdaptive");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "MaxAge", "Int32");
                xamlMember.Getter = get_24_AdeptlyAdaptive_MaxAge;
                xamlMember.Setter = set_24_AdeptlyAdaptive_MaxAge;
                break;
            case "App9.UserControls.GirlDataTemplate.Girl":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App9.UserControls.GirlDataTemplate");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Girl", "App9.Models.Girl");
                xamlMember.Getter = get_25_GirlDataTemplate_Girl;
                xamlMember.SetIsReadOnly();
                break;
            case "App9.Pages.Binding.Girls":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App9.Pages.Binding");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Girls", "System.Collections.ObjectModel.ObservableCollection`1<App9.Models.Girl>");
                xamlMember.Getter = get_26_Binding_Girls;
                xamlMember.Setter = set_26_Binding_Girls;
                break;
            case "App9.Pages.BindingListView.Girls":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App9.Pages.BindingListView");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Girls", "System.Collections.ObjectModel.ObservableCollection`1<App9.Models.Girl>");
                xamlMember.Getter = get_27_BindingListView_Girls;
                xamlMember.Setter = set_27_BindingListView_Girls;
                break;
            case "App9.Pages.MediaLibrary.Songs":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App9.Pages.MediaLibrary");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Songs", "System.Collections.ObjectModel.ObservableCollection`1<App9.Models.Song>");
                xamlMember.Getter = get_28_MediaLibrary_Songs;
                xamlMember.Setter = set_28_MediaLibrary_Songs;
                break;
            case "App9.Models.Song.Name":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App9.Models.Song");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_29_Song_Name;
                xamlMember.Setter = set_29_Song_Name;
                break;
            case "App9.Models.Song.Artist":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App9.Models.Song");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Artist", "String");
                xamlMember.Getter = get_30_Song_Artist;
                xamlMember.Setter = set_30_Song_Artist;
                break;
            case "App9.Models.Song.Album":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App9.Models.Song");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Album", "String");
                xamlMember.Getter = get_31_Song_Album;
                xamlMember.Setter = set_31_Song_Album;
                break;
            case "App9.Models.Song.Cover":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App9.Models.Song");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "Cover", "Windows.UI.Xaml.Media.Imaging.BitmapImage");
                xamlMember.Getter = get_32_Song_Cover;
                xamlMember.Setter = set_32_Song_Cover;
                break;
            case "App9.Models.Song.File":
                userType = (global::App9.App9_XamlTypeInfo.XamlUserType)GetXamlTypeByName("App9.Models.Song");
                xamlMember = new global::App9.App9_XamlTypeInfo.XamlMember(this, "File", "Windows.Storage.StorageFile");
                xamlMember.Getter = get_33_Song_File;
                xamlMember.Setter = set_33_Song_File;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::App9.App9_XamlTypeInfo.XamlSystemBaseType
    {
        global::App9.App9_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::App9.App9_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::App9.App9_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::App9.App9_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

